#!/bin/bash
set -e

# Post-installation script for GameManager

# Check if this is a fresh installation or upgrade
if [ "$1" = "configure" ] && [ -z "$2" ]; then
    # Fresh installation
    echo "Setting up GameManager..."

    # Create gamemanager user if it doesn't exist
    if ! id "gamemanager" &>/dev/null; then
        echo "Creating gamemanager user..."
        useradd --system --shell /bin/false --home-dir /opt/gamemanager --create-home gamemanager
    fi

    # Set up directories
    echo "Creating application directories..."
    mkdir -p /opt/gamemanager/var/task_logs
    mkdir -p /opt/gamemanager/var/db
    mkdir -p /opt/gamemanager/var/sessions
    mkdir -p /opt/gamemanager/var/config
    mkdir -p /opt/gamemanager/roms

    # Set permissions
    echo "Setting up permissions..."
    chown -R gamemanager:gamemanager /opt/gamemanager
    chmod 755 /opt/gamemanager
    chmod 755 /opt/gamemanager/var
    chmod 755 /opt/gamemanager/var/task_logs
    chmod 755 /opt/gamemanager/var/db
    chmod 755 /opt/gamemanager/var/sessions
    chmod 755 /opt/gamemanager/var/config
    chmod 755 /opt/gamemanager/roms

    # Create systemd service file
    echo "Installing systemd service..."
    cat > /etc/systemd/system/gamemanager.service << 'EOF'
[Unit]
Description=GameManager Game Collection Management System
After=network.target

[Service]
Type=exec
User=gamemanager
Group=gamemanager
WorkingDirectory=/opt/gamemanager
Environment=PYTHONPATH=/opt/gamemanager
ExecStart=/usr/bin/python3 app.py
ExecReload=/bin/kill -HUP $MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=gamemanager

# Security settings
NoNewPrivileges=true

[Install]
WantedBy=multi-user.target
EOF

    # Reload systemd and enable service
    systemctl daemon-reload
    systemctl enable gamemanager.service

    echo "GameManager installation completed!"
    echo ""
    echo "To start the service:"
    echo "  sudo systemctl start gamemanager"
    echo ""
    echo "To check status:"
    echo "  sudo systemctl status gamemanager"
    echo ""
    echo "To view logs:"
    echo "  sudo journalctl -u gamemanager -f"
    echo ""
    echo "The application will be available at: http://localhost:5000"
    echo ""
    echo "Configuration files are located in: /opt/gamemanager/var/config/"
    echo "Game ROMs should be placed in: /opt/gamemanager/roms/"
    echo "Media files will be stored in: /opt/gamemanager/roms/<system>/media/"

elif [ "$1" = "configure" ] && [ "$2" != "" ]; then
    # Upgrade
    echo "Upgrading GameManager..."
    
    # Ensure gamemanager user exists (in case it was removed)
    if ! id "gamemanager" &>/dev/null; then
        echo "Creating gamemanager user..."
        useradd --system --shell /bin/false --home-dir /opt/gamemanager --create-home gamemanager
    fi
    
    # Ensure directories exist (in case they were removed)
    mkdir -p /opt/gamemanager/var/task_logs
    mkdir -p /opt/gamemanager/var/db
    mkdir -p /opt/gamemanager/var/sessions
    mkdir -p /opt/gamemanager/var/config
    mkdir -p /opt/gamemanager/roms
    
    # Backup existing config files before upgrade
    if [ -f /opt/gamemanager/var/config/config.json ]; then
        cp /opt/gamemanager/var/config/config.json /opt/gamemanager/var/config/config.json.backup
        echo ""
        echo "⚠️  Existing configuration file found: /opt/gamemanager/var/config/config.json"
        echo "The new version includes updated configuration structure and directory mappings."
        echo ""
        echo "Options:"
        echo "  [Y] Yes - Overwrite with new config (recommended for new features)"
        echo "  [N] No  - Keep existing config (preserve current settings)"
        echo "  [D] Diff - Show differences between old and new config files"
        echo ""
        read -p "Do you want to overwrite the existing config.json? [Y/n/d]: " -r
        echo ""
        
        # Handle diff option
        while [[ $REPLY =~ ^[Dd]$ ]]; do
            echo ""
            echo "📋 Showing differences between old and new config.json:"
            echo "   - (red) Lines removed from old config"
            echo "   + (green) Lines added in new config"
            echo "   ~ (yellow) Lines modified"
            echo ""
            echo "Press Enter to continue..."
            read
            
            # Show diff with colors if available
            if command -v colordiff >/dev/null 2>&1; then
                colordiff -u /opt/gamemanager/var/config/config.json.backup /opt/gamemanager/var/config/config.json || true
            else
                diff -u /opt/gamemanager/var/config/config.json.backup /opt/gamemanager/var/config/config.json || true
            fi
            
            echo ""
            echo "Options:"
            echo "  [Y] Yes - Overwrite with new config (recommended for new features)"
            echo "  [N] No  - Keep existing config (preserve current settings)"
            echo "  [D] Diff - Show differences again"
            echo ""
            read -p "Do you want to overwrite the existing config.json? [Y/n/d]: " -r
            echo ""
        done
        
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            echo "Keeping existing config.json - you may need to manually update it later."
            # Mark that we should restore the backup
            touch /opt/gamemanager/var/config/config.json.keep_existing
        else
            echo "Will overwrite config.json with new version."
        fi
    fi
    if [ -f /opt/gamemanager/var/config/user.cfg ]; then
        cp /opt/gamemanager/var/config/user.cfg /opt/gamemanager/var/config/user.cfg.backup
    fi
    
    # Set permissions
    chown -R gamemanager:gamemanager /opt/gamemanager
    chmod 755 /opt/gamemanager
    chmod 755 /opt/gamemanager/var
    chmod 755 /opt/gamemanager/var/task_logs
    chmod 755 /opt/gamemanager/var/db
    chmod 755 /opt/gamemanager/var/sessions
    chmod 755 /opt/gamemanager/var/config
    chmod 755 /opt/gamemanager/roms

    # Update systemd service file
    echo "Updating systemd service..."
    cat > /etc/systemd/system/gamemanager.service << 'EOF'
[Unit]
Description=GameManager Game Collection Management System
After=network.target

[Service]
Type=exec
User=gamemanager
Group=gamemanager
WorkingDirectory=/opt/gamemanager
Environment=PYTHONPATH=/opt/gamemanager
ExecStart=/usr/bin/python3 app.py
ExecReload=/bin/kill -HUP $MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=gamemanager

# Security settings
NoNewPrivileges=true

[Install]
WantedBy=multi-user.target
EOF

    # Restore config files if they existed before upgrade
    if [ -f /opt/gamemanager/var/config/config.json.backup ]; then
        if [ -f /opt/gamemanager/var/config/config.json.keep_existing ]; then
            mv /opt/gamemanager/var/config/config.json.backup /opt/gamemanager/var/config/config.json
            rm -f /opt/gamemanager/var/config/config.json.keep_existing
            echo "Restored existing config.json (user chose to keep it)"
        else
            echo "Using new config.json (user chose to overwrite)"
        fi
        # Clean up backup file
        rm -f /opt/gamemanager/var/config/config.json.backup
    fi
    if [ -f /opt/gamemanager/var/config/user.cfg.backup ]; then
        mv /opt/gamemanager/var/config/user.cfg.backup /opt/gamemanager/var/config/user.cfg
        echo "Restored existing user.cfg"
    fi
    
    # Reload systemd
    systemctl daemon-reload
    
    # Restart service if it was running
    if systemctl is-active --quiet gamemanager; then
        systemctl restart gamemanager
        echo "GameManager service restarted."
    fi

    echo "GameManager upgrade completed!"
    echo "Configuration and data directories preserved."
    echo "Service has been updated and restarted if it was running."

else
    echo "GameManager post-installation script completed."
fi

exit 0
